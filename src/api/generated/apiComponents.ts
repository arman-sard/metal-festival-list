/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query';
import { ApiContext, queryKeyFn, useApiContext } from './apiContext';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';
import { deepMerge } from './apiUtils';

type QueryFnOptions = {
  signal?: AbortController['signal'];
};

export type GetUserError = Fetcher.ErrorWrapper<undefined>;

export type GetUserVariables = ApiContext['fetcherOptions'];

export const fetchGetUser = (
  variables: GetUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.GetUserResponseType, GetUserError, undefined, {}, {}, {}>({
    url: '/v1/example',
    method: 'get',
    ...variables,
    signal,
  });

// @ts-ignore
export function getUserQuery(variables: GetUserVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<Schemas.GetUserResponseType>;
};

export function getUserQuery(
  variables: GetUserVariables | reactQuery.SkipToken
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<Schemas.GetUserResponseType>)
    | reactQuery.SkipToken;
};

export function getUserQuery(
  variables: GetUserVariables | reactQuery.SkipToken
) {
  return {
    queryKey: queryKeyFn({
      path: '/v1/example',
      operationId: 'getUser',
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) => fetchGetUser(variables, signal),
  };
}

export const useSuspenseGetUser = <TData = Schemas.GetUserResponseType>(
  variables: GetUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetUserResponseType,
      GetUserError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { queryOptions, fetcherOptions } = useApiContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.GetUserResponseType,
    GetUserError,
    TData
  >({
    ...getUserQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetUser = <TData = Schemas.GetUserResponseType>(
  variables: GetUserVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetUserResponseType,
      GetUserError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { queryOptions, fetcherOptions } = useApiContext(options);
  return reactQuery.useQuery<Schemas.GetUserResponseType, GetUserError, TData>({
    ...getUserQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables)
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: '/v1/example';
  operationId: 'getUser';
  variables: GetUserVariables | reactQuery.SkipToken;
};
